#include"公共头.h"

int findLCS(string A, int n, string B, int m)
{
	/*vector<vector<int>>dp;
	dp.resize(n);
	dp[0].resize(m);
	dp[0][0] = A[0]==B[0]?1:0;*/
	int size1 = n + 1;
	int size2 = m + 1;
	int dp[n + 1][m + 1];
	for (int i = 1; i < m; ++i)
	{
		dp[i][0] = max(A[i]==B[i]?1:0,dp[i - 1][0]);
	}
	for (int i = 1; i < n; ++i)
	{
		dp[0][i] = max(A[i] == B[i] ? 1 : 0, dp[0][i-1]);
	}
	for (int i = 1; i < m; ++i)
	{
		for (int j = 1; j < n; ++j)
		{
			dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
			if (A[i] == B[j])
				dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1);
		}
	}
	return dp[m-1][n-1];
}
class LCS {
public:
	int findLCS(string A, int n, string B, int m) {
		//int table[n + 1][m + 1];

		for (int i = 0; i <= n; ++i)table[i][0] = 0;
		for (int i = 0; i <= m; ++i)table[0][i] = 0;
		for (int i = 0; i < n; ++i){
			for (int j = 0; j < m; ++j){
				if (A[i] == B[j])
					table[i + 1][j + 1] = table[i][j] + 1;
				else {
					table[i + 1][j + 1] = max(table[i][j + 1], table[i + 1][j]);
				}
			}
		}
		return table[n][m];
	}
};


void TestfindLCS()
{
	int m, n;
	cin >> m;
}
